datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String             @id @default(uuid())
  name             String?
  password         String?
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  fieldReservation FieldReservation[] @relation("UserFieldReservation")
  Authenticator    Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Facility {
  facilityId         String           @id @default(uuid())
  facilityName       String?
  facilityDesc       String?
  facilityAddress    String?
  facilityEmail      String?
  facilityTelephone  String?
  facilityFieldTypes String[]
  facilityAdminId    String           @unique
  facilityAdmin      String
  workingHoursStart  String
  workingHoursEnd    String
  facilityFields     FacilityFields[] @relation("FacilityToFields")
  workingHours       WorkingHours[]   @relation("FacilityToWorkingHours")
  hourlyPricing      HourlyPricing[]  @relation("FacilityToPricing")
}

model FacilityFields {
  fieldId          String             @id @default(uuid())
  facilityFieldId  String
  fieldName        String
  fieldType        String
  fieldPrice       Float?
  fieldReservation FieldReservation[] @relation("FieldReservationsToFacilityFields")
  facility         Facility           @relation("FacilityToFields", fields: [facilityFieldId], references: [facilityId])
  workingHours     WorkingHours[]     @relation("FieldToWorkingHours")
  hourlyPricing    HourlyPricing[]    @relation("FieldToPricing")
}

model WorkingHours {
  id         String    @id @default(uuid())
  facilityId String
  fieldId    String?
  date       DateTime?
  dayOfWeek  Int?
  startTime  String
  endTime    String
  isClosed   Boolean   @default(false)

  facility Facility        @relation("FacilityToWorkingHours", fields: [facilityId], references: [facilityId], onDelete: Cascade)
  field    FacilityFields? @relation("FieldToWorkingHours", fields: [fieldId], references: [fieldId], onDelete: Cascade)

  @@unique([facilityId, dayOfWeek, fieldId])
}

model HourlyPricing {
  id         String    @id @default(uuid())
  facilityId String
  fieldId    String?
  date       DateTime?
  dayOfWeek  Int?
  startTime  String
  endTime    String
  price      Float

  facility Facility        @relation("FacilityToPricing", fields: [facilityId], references: [facilityId], onDelete: Cascade)
  field    FacilityFields? @relation("FieldToPricing", fields: [fieldId], references: [fieldId], onDelete: Cascade)

  @@index([facilityId, fieldId])
}

model FieldReservation {
  reservationId        String         @id @default(uuid())
  fieldReservationId   String
  reservationName      String
  reservationStartTime DateTime       @db.Timestamptz(2)
  reservationEndTime   DateTime       @db.Timestamptz(2)
  facilityFields       FacilityFields @relation("FieldReservationsToFacilityFields", fields: [fieldReservationId], references: [fieldId], onDelete: Cascade)
  userId               String
  user                 User           @relation("UserFieldReservation", fields: [userId], references: [id], onDelete: Cascade)
}
